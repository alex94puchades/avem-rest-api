{"version":3,"sources":["app/oauth2.js"],"names":[],"mappings":"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","file":"app/oauth2.js","sourcesContent":["import _ from 'lodash';\nimport async from 'async';\nimport oauth2orize from 'oauth2orize';\n\nimport config from '../../config';\nimport User from './models/User';\nimport Client from './models/Client';\nimport Session from './models/Session';\nimport AccessToken from './models/AccessToken';\nimport RefreshToken from './models/RefreshToken';\n\nconst server = oauth2orize();\nexport default server;\n\nserver.serializeClient((client, done) => {\n\tdone(null, client._id);\n});\n\nserver.deserializeClient((id, done) => {\n\tClient.findById(id, done);\n});\n\nserver.exchange(oauth2orize.exchange.password((client, username, password, done) => {\n\tif (!client || !client.trusted) return done(null, false);\n\tUser.findOne({ email: username }, (err, user) => {\n\t\tif (err || !user) return done(err, false);\n\t\tuser.verifyPassword(password, (err, isMatch) => {\n\t\t\tif (err || !isMatch) return done(err, false);\n\t\t\tlet session = new Session;\n\t\t\tsession.user = user._id;\n\t\t\tsession.ownerClient = client._id;\n\t\t\tlet tokenDuration = config.oauth2.token.resourceOwnerDuration;\n\t\t\tsession.tokenDuration = tokenDuration;\n\t\t\tlet accessToken = new AccessToken;\n\t\t\tlet refreshToken = new RefreshToken;\n\t\t\taccessToken.session = refreshToken.session = session._id;\n\t\t\taccessToken.expirationDate = Date.now() + tokenDuration * 1000;\n\t\t\tasync.series([\n\t\t\t\tnext => session.save(next),\n\t\t\t\tnext => accessToken.save(next),\n\t\t\t\tnext => refreshToken.save(next),\n\t\t\t], err => {\n\t\t\t\tif (err) return done(err);\n\t\t\t\tdone(null, accessToken.value, refreshToken.value, {\n\t\t\t\t\texpires_in: tokenDuration,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n}));\n\nserver.exchange(oauth2orize.exchange.refreshToken((client, token, done) => {\n\tRefreshToken.findOne({ value: token }, (err, refreshToken) => {\n\t\tif (err || !refreshToken) return done(err, false);\n\t\tSession.findById(refreshToken.session, (err, session) => {\n\t\t\tif (err || !session) return done(err, false);\n\t\t\tlet newAccessToken = new AccessToken;\n\t\t\tlet newRefreshToken = new RefreshToken;\n\t\t\tlet tokenDuration = session.tokenDuration;\n\t\t\tnewAccessToken.session = newRefreshToken.session = session._id;\n\t\t\tnewAccessToken.expirationDate = Date.now() + tokenDuration * 1000;\n\t\t\tasync.series([\n\t\t\t\tnext => refreshToken.remove(next),\n\t\t\t\tnext => newAccessToken.save(next),\n\t\t\t\tnext => newRefreshToken.save(next),\n\t\t\t], err => {\n\t\t\t\tif (err) return done(err);\n\t\t\t\tdone(null, newAccessToken.value, newRefreshToken.value, {\n\t\t\t\t\texpires_in: tokenDuration,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n}));\n\nsetInterval(() => {\n\tAccessToken.find({ $lt: { expirationDate: Date.now() }}, (err, results) => {\n\t\tif (!err) {\n\t\t\tasync.each(results, (accessToken, next) => {\n\t\t\t\taccessToken.remove(next);\n\t\t\t});\n\t\t}\n\t});\n}, config.oauth2.token.removeExpiredInterval * 1000);\n"],"sourceRoot":"/source/"}