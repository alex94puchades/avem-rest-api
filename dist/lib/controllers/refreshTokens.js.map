{"version":3,"sources":["lib/controllers/refreshTokens.js"],"names":[],"mappings":"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","file":"lib/controllers/refreshTokens.js","sourcesContent":["import async from 'async';\nimport {Router} from 'express';\nimport jsonapify, {Resource, Property, Template, Ref} from 'jsonapify';\n\nimport * as common from './common';\nimport * as logger from '../logger';\nimport {AccessToken, RefreshToken} from '../models';\nimport {resource as sessionResource} from './sessions';\n\nconst refreshTokenResource = new Resource(RefreshToken, {\n\t'type': 'refresh-tokens',\n\t'id': {\n\t\tvalue: new Property('value'),\n\t\twritable: false,\n\t},\n\t'links': {\n\t\t'self': {\n\t\t\tvalue: new Template('/refresh-tokens/${value}'),\n\t\t\twritable: false,\n\t\t},\n\t},\n\t'relationships': {\n\t\t'session': {\n\t\t\tvalue: new Ref(sessionResource, 'session'),\n\t\t\twritable: false,\n\t\t},\n\t},\n});\n\nconst router = Router();\n\nrouter.get('/',\n\tcommon.authenticate('token-bearer'),\n\tcommon.requirePrivilege('refresh-token:enum'),\n\tjsonapify.enumerate(refreshTokenResource),\n\tlogger.logErrors(), jsonapify.errorHandler());\n\nfunction ifNotTokenOwner(priv) {\n\treturn function(req, cb) {\n\t\tasync.parallel({\n\t\t\taccessToken: function(cb) {\n\t\t\t\tvar token = common.extractAccessToken(req);\n\t\t\t\tAccessToken.findOne({ value: token }, cb);\n\t\t\t},\n\t\t\trefreshToken: function(cb) {\n\t\t\t\tvar token = req.params.value;\n\t\t\t\tRefreshToken.findOne({ value: token }, cb);\n\t\t\t},\n\t\t}, function(err, results) {\n\t\t\tif (err) return cb(err);\n\t\t\tif (!results.accessToken) return cb(null, false);\n\t\t\tif (!results.refreshToken) return cb(null, false);\n\t\t\tvar accessTokenSessionId = results.accessToken.session;\n\t\t\tvar refreshTokenSessionId = results.refreshToken.session;\n\t\t\tvar tokenOwner = refreshTokenSessionId.equals(accessTokenSessionId);\n\t\t\tcb(null, tokenOwner ? false : priv);\n\t\t});\n\t}\n}\n\nrouter.get('/:value',\n\tcommon.authenticate('token-bearer'),\n\tcommon.requirePrivilege(ifNotTokenOwner('refresh-token:read')),\n\tjsonapify.read([refreshTokenResource, { value: jsonapify.param('value') }]),\n\tlogger.logErrors(), jsonapify.errorHandler());\n\nrouter.delete('/:value',\n\tcommon.authenticate('token-bearer'),\n\tcommon.requirePrivilege(ifNotTokenOwner('refresh-token:remove')),\n\tjsonapify.remove([refreshTokenResource, { value: jsonapify.param('value') }]),\n\tlogger.logErrors(), jsonapify.errorHandler());\n\nexport default router;\nexport { refreshTokenResource as resource };\n"],"sourceRoot":"/source/"}